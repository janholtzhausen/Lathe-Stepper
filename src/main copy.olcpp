#include <TMC2130Stepper.h>
#include "FastAccelStepper.h"

#define EN_PIN          23  
#define DIR_PIN         21  
#define STEP_PIN        22  
#define CS_PIN          15  
#define MOSI            13   
#define MISO            12   
#define SCK             14   
#define R_SENSE         0.11f 
#define POT_PIN         34
#define HOLDRATIO       0.2f
#define STARTCURRENT    800
#define MINCURRENT      300
#define MEDCURRENT      600
#define HIGHCURRENT     800
#define MAXCURRENT      1000
#define MAXSPEED        20000



//-----------------------
TaskHandle_t Task0;
TaskHandle_t Task1;
QueueHandle_t stepperSpeed;
//----------------------

int mappedVal = 0;
const int numReadings = 1000;

int readings[numReadings];  // the readings from the analog input
int readIndex = 0;          // the index of the current reading
int total = 0;              // the running total
int average = 0;            // the average



TMC2130Stepper driver = TMC2130Stepper(EN_PIN, DIR_PIN, STEP_PIN, CS_PIN, MOSI, MISO, SCK);

FastAccelStepperEngine engine = FastAccelStepperEngine();
FastAccelStepper *stepper = NULL;


hw_timer_t *Timer0_Cfg = NULL;


void loop0(void * parameter) {
	for (;;) {
      total = total - readings[readIndex];
      readings[readIndex] = analogRead(POT_PIN);
      total = total + readings[readIndex];
      readIndex = readIndex + 1;
      if (readIndex >= numReadings) {
         readIndex = 0;
      }
      average = total / numReadings;
      int mappedVal = map(average,0,4095,0,MAXSPEED);
//      Serial.print("Stepper Speed ==> ");
//      Serial.println(mappedVal);
/*      if(average < 5 ){
         driver.setCurrent(MINCURRENT, R_SENSE, HOLDRATIO);
         driver.stealthChop(1);
         digitalWrite(EN_PIN, HIGH);
         driver.stop_enable(1);
      } else 
      if(average >= 5 && average < 512 ){
         driver.setCurrent(MINCURRENT, R_SENSE, HOLDRATIO);
         driver.stealthChop(1);
         digitalWrite(EN_PIN, LOW);
         driver.stop_enable(0);
      } else 
      if(average >= 512 && average < 1024 ){
         driver.setCurrent(MEDCURRENT, R_SENSE, HOLDRATIO);
         digitalWrite(EN_PIN, LOW);
         driver.stop_enable(0);
      } else 
      if(average >= 1024 && average < 2048 ){
         driver.setCurrent(HIGHCURRENT, R_SENSE, HOLDRATIO);
         driver.stealthChop(0);
         digitalWrite(EN_PIN, LOW);
         driver.stop_enable(0);
      } else 
         driver.setCurrent(MAXCURRENT, R_SENSE, HOLDRATIO);
         driver.stealthChop(0);
         digitalWrite(EN_PIN, LOW);
         driver.stop_enable(0);   
*/
      
	}
}

void loop1(void * parameter) {
   for (;;) {
  stepper->moveTo(10000);
  delay(5000);
  stepper->moveTo(0);
  delay(5000);



   }
}

void setup() {

  for (int thisReading = 0; thisReading < numReadings; thisReading++) {
    readings[thisReading] = 0;
  }

    SPI.begin();
    Serial.begin(115200);
    while(!Serial);
    pinMode(CS_PIN, OUTPUT);
    digitalWrite(CS_PIN, HIGH);
    
    driver.begin();    
    driver.high_speed_mode(0);
    driver.microsteps(16);
    driver.setCurrent(STARTCURRENT, R_SENSE, HOLDRATIO);

  engine.init();
  stepper = engine.stepperConnectToPin(STEP_PIN);
  if (stepper) {
    stepper->setDirectionPin(DIR_PIN);
    stepper->setEnablePin(EN_PIN);
    stepper->setAutoEnable(true);
    stepper->setDelayToEnable(5000);
    stepper->setDelayToDisable(1000);
   stepper->setAcceleration(4000);
  }

}





void loop() {

     delay(2000); 
   stepper->setSpeedInHz(2000);
   stepper->forceStopAndNewPosition(0);
   Serial.print("POS1:");
   Serial.println(stepper->getCurrentPosition());
   stepper->moveTo(200000);
   Serial.print("POS2:");
   Serial.println(stepper->getCurrentPosition());
   
}